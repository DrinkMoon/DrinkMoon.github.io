<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wind Soul</title>
  
  
  <link href="/drimoon-blog/atom.xml" rel="self"/>
  
  <link href="https://drinkmoon.github.io/drimoon-blog/"/>
  <updated>2020-05-08T17:54:42.759Z</updated>
  <id>https://drinkmoon.github.io/drimoon-blog/</id>
  
  <author>
    <name>Drimoon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CMake学习记录</title>
    <link href="https://drinkmoon.github.io/drimoon-blog/2020/05/05/cmake_notes/"/>
    <id>https://drinkmoon.github.io/drimoon-blog/2020/05/05/cmake_notes/</id>
    <published>2020-05-05T00:00:00.000Z</published>
    <updated>2020-05-08T17:54:42.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h1><p>选择理由是它比其他make工具应用更广泛，安装也很简单，官方持续更新了很多现代化的语法。 但目前虽然有很多文档/材料，但缺乏优秀的从零开始的CMake中文教程，之前大学里写CMake就经常遇坑，只能用StackOverflow维持生活… 所以这篇博客是关于我学习CMake的记录，也可作为新手教程以供参考。</p><p>我倾向于用实际例子记录，对出现的问题进行解释、修正，对写起来不优雅的地方进行优化。</p><p>另外，因为存在个人翻译不准确的情况，附加了一些参考的超链接。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World"></a>Hello, World</h2><p>CMake构建需要使用它特定的脚本语言，以HelloWorld作为开始：</p><ul><li>新建项目文件夹，在其中创建CMakeLists.txt</li><li>指定本项目构建需要的CMake最低版本: cmake_minimum_required(VERSION xxx)<ul><li>尽量选择3.x最近的正式发布版本作为学习</li></ul></li><li>指定项目名称/版本，使用的编程语言：project(HelloWorld VERSION 0.1.0 LANGUAGES CXX)<ul><li>还可以指定项目描述，项目主页等</li></ul></li><li>单文件为例，以Main.cpp生成HelloWorld.exe<ul><li>add_executable(HelloWorld Main.cpp)</li></ul></li><li>项目名称HelloWorld重复出现了两次，我们定义变量：SET(ProjectName HelloWorld)，通过${ProjectName}来替换重复的地方</li><li>接下来同CMake-GUI的正常使用，生成项目</li><li>除了HelloWorld，还会生成其他项目<ul><li>ALL_BUILD相当于makefile的默认目标，用于构建所有项目</li><li>ZERO_CHECK用于检查CMakeLists.txt是否过期，保证其修改后能正确重新构建</li></ul></li></ul><p>CMakeLists.txt：</p><pre><code># CMake vesion in my local machine is 3.17cmake_minimum_required(VERSION 3.17)# Language C++ : CXXSET(ProjectName HelloWorld)project(${ProjectName} VERSION 0.1.0 LANGUAGES CXX)add_executable(${ProjectName} Main.cpp)</code></pre><p>Main.cpp：</p><pre><code>#include &lt;iostream&gt;int main(){    std::cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; std::endl;    return 0;}</code></pre><h2 id="Hello-a-bigger-World"><a href="#Hello-a-bigger-World" class="headerlink" title="Hello, a bigger World"></a>Hello, a bigger World</h2><p>最近正好在学习DirectX12，试试用CMake来构建图形程序~</p><p>与构建相关的目录结构如下：</p><ul><li>FireSoul<ul><li>assets ： 资源目录</li><li>bin : 输出目录</li><li>build : 构建目录</li><li>lib ：库目录</li><li>src ： 源码<ul><li>folder1<ul><li>include<ul><li>*.h</li></ul></li><li>*.cpp</li></ul></li><li>folder2<ul><li>include<ul><li>*.h</li></ul></li><li>*.cpp</li></ul></li><li>… </li><li>CMakeLists.txt</li></ul></li><li>CMakeLists.txt</li></ul></li></ul><h3 id="组织多重目录"><a href="#组织多重目录" class="headerlink" title="组织多重目录"></a>组织多重目录</h3><p>现在我们的代码是分散在各个子目录里的，需要使用add_subdirectory(目录)包含子目录，这些子目录下也需要创建CMakeLists.txt，会在add_subdirectory后执行。</p><h3 id="设置输出目录为bin"><a href="#设置输出目录为bin" class="headerlink" title="设置输出目录为bin"></a>设置输出目录为bin</h3><p>SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)</p><h3 id="设置Unicode字符集"><a href="#设置Unicode字符集" class="headerlink" title="设置Unicode字符集"></a>设置Unicode字符集</h3><p>add_definitions(-DUNICODE -D_UNICODE)</p><p>./CMakeLists.txt</p><pre><code>cmake_minimum_required(VERSION 3.17)SET(ProjectName FireSoul)SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)project(${ProjectName} VERSION 0.1.0 LANGUAGES CXX)add_definitions(-DUNICODE -D_UNICODE)add_subdirectory(src)</code></pre><h3 id="设置为窗口程序"><a href="#设置为窗口程序" class="headerlink" title="设置为窗口程序"></a>设置为窗口程序</h3><p>set_target_properties(${ProjectName} PROPERTIES<br>    LINK_FLAGS /SUBSYSTEM:WINDOWS</p><h3 id="包含多个头文件-amp-添加多个源文件"><a href="#包含多个头文件-amp-添加多个源文件" class="headerlink" title="包含多个头文件 &amp; 添加多个源文件"></a>包含多个头文件 &amp; 添加多个源文件</h3><p>现在我们需要包含头文件目录，使用include_directories(目录)。<br>add_executable现在要输入多个源文件名称，我们想要让CMake可以自动搜索目录下的源文件然后输入过来。<br>使用aux_source_directory(目录 变量名)：这个指令可以将目录下的所有源文件写入到变量中。</p><p>./source/CMakeLists.txt:</p><pre><code>include_directories(    ./core/include    ./common/include    ./main/include)aux_source_directory(. CxxFiles)aux_source_directory(./core/ CxxFiles)aux_source_directory(./common/ CxxFiles)aux_source_directory(./main/ CxxFiles)add_executable(${ProjectName} ${CxxFiles})set_target_properties(${ProjectName} PROPERTIES    LINK_FLAGS /SUBSYSTEM:WINDOWS)</code></pre><p>)</p><h3 id="优化-使用target-include-directories"><a href="#优化-使用target-include-directories" class="headerlink" title="[优化] 使用target_include_directories"></a>[优化] 使用target_include_directories</h3><p>include_directories在CMake新版本中不被推荐，可以使用进阶版的target_include_directories(项目 作用域 头文件目录)。</p><p>有三种<a href="https://stackoverflow.com/questions/26243169/cmake-target-include-directories-meaning-of-scope" target="_blank" rel="noopener" title="不同的作用域">不同的作用域</a>：</p><ul><li>PRIVATE<ul><li>头文件目录会填充指定项目的INCLUDE_DIRECTORIES属性</li><li>目录下的头文件可以出现在这个项目的头文件/源文件中</li></ul></li><li>INTERFACE<ul><li>头文件目录会填充指定项目的INTERFACE_INCLUDE_DIRECTORIES属性</li><li>目录下的头文件可以出现在这个项目的头文件中，但不能出现在源文件中</li><li>target_include_directories(libname INTERFACE include PRIVATE include/libname)，可以直接在libname项目中包含include/libname下的头文件，但对于其他使用libname的项目只能添加libname/后缀</li></ul></li><li>PUBLIC<ul><li>填充PRIVATE + INTERFACE会填充的属性</li><li>这些头文件有可能出现在项目中，也可能在使用该项目的其他项目中</li></ul></li></ul><h3 id="问题-包含目录识别为外部依赖"><a href="#问题-包含目录识别为外部依赖" class="headerlink" title="[问题] 包含目录识别为外部依赖"></a>[问题] 包含目录识别为外部依赖</h3><p>这里发现虽然项目构建/编译成功，但是头文件被项目识别为<a href="https://stackoverflow.com/questions/13703647/how-to-properly-add-include-directories-with-cmake#](https://stackoverflow.com/questions/13703647/how-to-properly-add-include-directories-with-cmake#" target="_blank" rel="noopener" title="外部依赖">外部依赖</a>，没有出现在项目中。 这里我们需要把所有*.h加到add_executeable中。</p><p>./source/CMakeLists.txt:</p><pre><code>SET(HeaderFiles ./common/include/Camera.h ./common/include/d3dApp.h ./common/include/d3dUtil.h ./common/include/d3dx12.h ./common/include/DDSTextureLoader.h ./common/include/GameTimer.h ./common/include/GeometryGenerator.h ./common/include/MathHelper.h ./common/include/UploadBuffer.h ./main/include/ShadowMap.h ./main/include/FrameResource.h)aux_source_directory(. CxxFiles)aux_source_directory(./core/ CxxFiles)aux_source_directory(./common/ CxxFiles)aux_source_directory(./main/ CxxFiles)add_executable(${ProjectName} ${HeaderFiles} ${CxxFiles})set_target_properties(${ProjectName} PROPERTIES    LINK_FLAGS /SUBSYSTEM:WINDOWS)target_include_directories(${ProjectName} PRIVATE    ./core/include    ./common/include    ./main/include)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CMake&quot;&gt;&lt;a href=&quot;#CMake&quot; class=&quot;headerlink&quot; title=&quot;CMake&quot;&gt;&lt;/a&gt;CMake&lt;/h1&gt;&lt;p&gt;选择理由是它比其他make工具应用更广泛，安装也很简单，官方持续更新了很多现代化的语法。 但目前虽然有很多文档/材料
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2019-总结</title>
    <link href="https://drinkmoon.github.io/drimoon-blog/2019/12/08/2019_summary/"/>
    <id>https://drinkmoon.github.io/drimoon-blog/2019/12/08/2019_summary/</id>
    <published>2019-12-08T00:00:00.000Z</published>
    <updated>2020-05-08T17:54:42.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关键事件"><a href="#关键事件" class="headerlink" title="关键事件"></a>关键事件</h2><p>12/20/2019: 从游戏公司离职</p><p>12/23/2019: 入职三维软件公司</p><h2 id="回顾游戏生涯"><a href="#回顾游戏生涯" class="headerlink" title="回顾游戏生涯"></a>回顾游戏生涯</h2><ul><li>幼儿园<ul><li>暴力摩托/炸弹人(联众游戏大厅)</li></ul></li><li>小学（当时每周五放学总会有几个同学来我家挤在一台电脑前）<ul><li>奇域/星际家园(可乐吧)</li><li>梦幻西游</li><li>泡泡堂</li><li>跑跑卡丁车</li><li>冒险岛</li><li>热血英豪</li><li>功夫小子</li><li>大话战国</li></ul></li><li>初中(这个时候没有一起玩游戏的同学，所以我看小说居多)<ul><li>SLG类型页游(当时刚刚兴起，不像现在这样低俗…)</li><li>猎国/</li><li>天龙八部</li></ul></li><li>高中<ul><li>梦三国</li><li>英雄联盟</li><li>炉石传说</li></ul></li><li>大学<ul><li>守望先锋</li></ul></li></ul><p>每一款游戏都至少玩了n个月…大学后终于自由了，开始学习游戏编程~</p><h2 id="走进游戏开发"><a href="#走进游戏开发" class="headerlink" title="走进游戏开发"></a>走进游戏开发</h2><p>一转眼已经学了两年多游戏开发(c/c++, windows编程, 计算机网络，图形学基础，directx，游戏逻辑，游戏引擎架构, lua脚本…)…</p><p>已经大三上学期了，所以决定申请离校实习，做游戏去~</p><p>去上海面试了第一家创业公司，发现在里面客户端/服务器什么的一个人从头到尾都可以写，而且主程为人和技术很好，签完协议，开始制作一款叫《波姆波姆团》的手游。(<a href="https://www.taptap.com/app/133543" target="_blank" rel="noopener">https://www.taptap.com/app/133543</a>, 这是后来上线的taptap页面，2019年11月停服)</p><h2 id="波姆波姆团"><a href="#波姆波姆团" class="headerlink" title="波姆波姆团"></a>波姆波姆团</h2><p>《波姆波姆团》的制作有点坎坷，虽然17年4月份刚入职时制作人介绍目前已经开发了50%，预计一年内上线…</p><p>这是一款皇室战争like的游戏，说一下不同之处：</p><ul><li>地形<ul><li>草丛(可以隐身埋伏)</li><li>高地(能让地面单位攻击空中单位，但低地攻击高地会出现miss)</li><li>河流(掉入河中会慢慢淹死，水系单位可以渡河)</li><li>桥梁(可以被摧毁，阻碍前进)</li></ul></li><li>技能/卡牌<ul><li>moba类型的不同技能(比如单位头上有主动切换普攻形态的按钮)</li><li>围绕地形创建/破坏的法术卡</li><li>围绕炸弹争夺的特殊卡</li><li>站场持续成长型单位</li><li>增加了玩家自己的一些技能</li></ul></li><li>玩法<ul><li>只有一座塔，而且单位是不能攻击塔的</li><li>必须让单位运送一颗炸弹到对方塔前，然后炸毁它</li><li>炸弹刚开始在场地中间，放单位争抢它</li><li>单位触碰到炸弹，会抱起它</li><li>炸弹会定时爆炸，所以持有炸弹的单位不能长时间拿着</li><li>炸弹可以抛给对面，但是飞行中途撞到敌方单位会被抢断</li></ul></li><li>表现<ul><li>横屏操作</li><li>炸弹后来改成了篮球，塔改成了篮筐，添加了三分线灌篮</li></ul></li></ul><p>17年4月-9月是我的入门期，这段时间和主程一起工作，学习到了他的工作方式：</p><ul><li>对待bug的严谨（无论客户端/服务器，自己写的/他人写的bug，都要在发现后彻查原因，因为你忽视的bug最后总还是会再来找你的…）</li><li>写代码的细致（虽然已经是996+了，主程写代码也不会急于求成，追求稳定/可靠/可扩展，时间不够就加班继续…)</li></ul><h2 id="上线前的困难"><a href="#上线前的困难" class="headerlink" title="上线前的困难"></a>上线前的困难</h2><p>17年10月公司资金断裂，员工发不起工资，从十几人的团队变成了七人(离职了QA/音效/ui/数值策划/执行策划)，除了项目制作人/主程/主策，还剩下3d/特效/我和另一位程序。</p><p>人手变少后，反而更有能发挥的空间，比如之前的技能/游戏玩法实现是交给执行策划去做，程序开放脚本接口，bug频发。因为对接低效，执行策划缺乏处理复杂逻辑的能力。在我接手以后，用lua重构了所有技能/玩法规则。</p><p>为了减少服务器压力，做全球同服，网络同步上也从状态同步改成了帧同步，服务器上的战斗逻辑都移植到了客户端上，熟悉了一遍战斗逻辑框架。</p><p>到了2018年3月左右，游戏战斗上已经很稳定了，解决了已知bug，帧同步同步率也提升了很多。但这个时候发现游戏吸引力不足，入门难，所以把炸弹从形式上改成了篮球，防御塔改成了篮筐，爆炸改成灌篮…</p><p>对于游戏来说，有好的运营很重要，但运营往往喜欢发行热门类型的游戏，我们的游戏不被认可，新手又比较劝退。所以后来优化了新手引导/玩法，空闲时间大家还做了一个moba+足球的分支(当时正好是世界杯)，最后找到了公司合作发行。主策此时因为某些原因离职了，新招了一位策划，游戏理解除我外是比较高的了，对项目上线起了帮助。</p><p>新策划同事来了之后，开始优化付费模式，玩法上除pvp外，开始制作编辑器做pve，简化玩法/角色技能。这段时间我在做pve编辑器/电脑ai/新玩法/活动/付费等，个人开始觉得每天的工作还算简单，慢慢将游戏内所有功能处理了一遍，到18年的7月在taptap上的测试以后，终于有了比较好的数据与评价，准备上线。</p><h2 id="第一次项目上线"><a href="#第一次项目上线" class="headerlink" title="第一次项目上线"></a>第一次项目上线</h2><p>18年11月1日是正式上线的时间，之前的一段时间基本上有文档或者口头说的需求我都会加班改完，让项目能快一点上线。</p><p>这已经是我实习一年半以后了，之前投入的时间/精力不能白费。</p><p>11月开测后，用户留存/付费数据不错，问题是游戏类型不吸引人下载，taptap因为觉得我们游戏很有新意还给了编辑推荐位，但是下载数也不过几万。</p><p>对于我来说，这很cool，看群里玩家一起讨论我编写的电脑AI水平怎么样，实现的角色技能怎么搭配等，我也在游戏里创建了一个俱乐部，教新手搭配卡组，带他们双排，挺开心的。</p><p>后续正常地开发/维护了一段时间，过年前运营开始加刺激付费的功能，大厅充斥着各种氪金按钮(月卡、年卡、首充、段位礼包、节日活动、限时抽奖…)。但年后数据也就一般，新玩家也很少进来(这个是关键)，所以游戏本身虽然趣味性和质量尚可，但因缺少营收，在19年11月停服了。</p><h2 id="新的商业项目：自走棋"><a href="#新的商业项目：自走棋" class="headerlink" title="新的商业项目：自走棋"></a>新的商业项目：自走棋</h2><p>19年初，Dota2自走棋因为创新的玩法吸引了一大批玩家入坑，我们的制作人与策划决定用现有的二次元美术资源来做一款自走棋游戏。</p><p>这个项目开发非常快，一来是我个人对自走棋很感兴趣，Dota2自走棋堡垒段位，对核心玩法熟悉；二来，前一个项目重构/不停修改游戏代码，我对逻辑开发上没什么陌生的区域。</p><p>于是，年后三个月左右和同事改造出了自己的自走棋，测试了几次，当七月份上线时用户数非常多，但因为负责服务器压测的同事没发现问题，出现并发过大导致服务器宕机，还因为用户数太多暴露了服务器以前的bug(排队登录异常，用户同名聊天卡死)，游戏也发现平衡性/付费/玩法上不够完善，即使如此，7月份玩家也很多。</p><p>不过在这个项目开发过程中，我却慢慢失去了热情。一是因为玩法上是搬运dota2自走棋规则，不够创新；二是因为技术上从波姆团复用，工作缺少挑战性；三是因为公司游戏引擎也不打算升级，技术落后难以改变。所以这个时候，我开始考虑离职了。</p><h2 id="转职"><a href="#转职" class="headerlink" title="转职"></a>转职</h2><p>考虑到市面做游戏的国内公司都与想做的游戏不太一样，游戏特点大多数是捞一笔就跑的，而想做一款长期游戏的公司往往难以生存。去一家腾讯/网易之类的“顶级游戏工作室”做游戏，也难以解答自己的疑问。</p><p>我最后选择了965 &amp; 技术型的Autodesk，希望提升个人能力(图形学，大型软件开发，英语…)，个人时间充足也可独立制作游戏~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关键事件&quot;&gt;&lt;a href=&quot;#关键事件&quot; class=&quot;headerlink&quot; title=&quot;关键事件&quot;&gt;&lt;/a&gt;关键事件&lt;/h2&gt;&lt;p&gt;12/20/2019: 从游戏公司离职&lt;/p&gt;
&lt;p&gt;12/23/2019: 入职三维软件公司&lt;/p&gt;
&lt;h2 id=&quot;回顾
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
